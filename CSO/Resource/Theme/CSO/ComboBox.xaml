<ResourceDictionary x:Class="CSO.Resource.Theme.CSO.ComboBox"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTemplate x:Key="ComboBoxErrorAdorner">
        <DockPanel>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border BorderBrush="Transparent" BorderThickness="0">
                    <AdornedElementPlaceholder />
                </Border>
                <Border BorderBrush="Red" BorderThickness="1" >
                </Border>
            </Grid>
        </DockPanel>
    </ControlTemplate>

    <!-- Flat ComboBox -->
    <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="#e3e9ef" />
    <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#FFE8F0FA" />
    <SolidColorBrush x:Key="ComboBoxFocusedBackgroundBrush" Color="#FFAEBDD4" />
    <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
    <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />

    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <EventSetter Event="PreviewKeyDown" Handler="Global_PreviewKeyDown" />
    </Style>

    <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2" Name="Border"
                            BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" 
                            CornerRadius="0" BorderThickness="0" 
                            Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
            <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444" Name="ButtonBorder"
                            CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
                            Background="{StaticResource ComboBoxNormalBackgroundBrush}" />

            <Path Name="Arrow" Grid.Column="1" 
                            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                            HorizontalAlignment="Center" Fill="#444"
                            VerticalAlignment="Center" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Flat ComboBox -->
    <SolidColorBrush x:Key="ComboBoxRowBackgroundHoverBrush" Color="#E4F3FB" />
    <SolidColorBrush x:Key="ComboBoxRowBorderHoverBrush" Color="#70BFE6" />
    <SolidColorBrush x:Key="ComboBoxRowBackgroundSelectedBrush" Color="#F6F6F6" />
    <SolidColorBrush x:Key="ComboBoxRowBorderSelectedBrush" Color="#D9D9D9" />


    <Style x:Key="ComboBoxFlatStyle"  TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="IsEditable" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <!--<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>-->
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource MainTextBrush}"/>
        <Setter Property="TextElement.FontFamily" Value="Segoe UI"/>
        <Setter Property="TextElement.FontSize" Value="14"/>
        <!--<Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>-->
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <EventSetter Event="PreviewKeyDown" Handler="Global_PreviewKeyDown"/>
        <EventSetter Event="PreviewKeyUp" Handler="ComboBox_PreviewKeyUp" />

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2"
                                ClickMode="Press" Focusable="False"  IsTabStop="False"
                                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                        <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"
                                                  HorizontalAlignment="Left" VerticalAlignment="Center"                              
                                                  Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                                  ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>

                        <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"                     
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     Visibility="Hidden" 
                                     Width="{Binding Path=Width, RelativeSource={RelativeSource TemplatedParent}}"
                                     Height="{Binding Path=Height, RelativeSource={RelativeSource TemplatedParent}}"
                                     HorizontalAlignment="Left" VerticalAlignment="Center"
                                     Focusable="True" Style="{StaticResource TextBoxStyle}">
                        </TextBox>

                        <!-- Popup showing items -->
                        <Popup Name="Popup" Placement="Bottom"
                                       Focusable="False" AllowsTransparency="True"
                                       IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                                       PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True"
                                            MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                            MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border Name="DropDownBorder" Background="White" Margin="0, 1, 0, 0"
                                                CornerRadius="0" BorderThickness="1,1,1,1" 
                                                BorderBrush="{StaticResource DarkBrush}"/>
                                <ScrollViewer Margin="4" SnapsToDevicePixels="True" IsTabStop="False">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                    <!--<VirtualizingStackPanel IsItemsHost="True" VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" KeyboardNavigation.DirectionalNavigation="Contained" />-->
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Data specific controls -->

    <Style x:Key="ComboTraderTextBlockStyle" TargetType="TextBlock">
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Height" Value="18"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBoxItem}}, Path=IsSelected}" Value="False"/>
                    <Condition Binding="{Binding TypeID}" Value="2"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource AlertTextBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBoxItem}}, Path=IsSelected}" Value="False"/>
                    <Condition Binding="{Binding TypeID}" Value="3"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource MediumMainBrush}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboCOATextBlockStyle" TargetType="TextBlock">
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Height" Value="18"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBoxItem}}, Path=IsSelected}" Value="False"/>
                    <Condition Binding="{Binding TypeID}" Value="2"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource AlertTextBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBoxItem}}, Path=IsSelected}" Value="False"/>
                    <Condition Binding="{Binding TypeID}" Value="3"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource MediumMainBrush}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ComboPayment Item Template -->
    <Style x:Key="ComboPaymentTextBlockStyle" TargetType="TextBlock">
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Height" Value="18"/>
    </Style>


    <!-- ComboTrader Item Template -->
    <Style x:Key="ComboTraderItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="150"/>
                            <ColumnDefinition Width="150"/>
                            <ColumnDefinition Width="100"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Border" Grid.ColumnSpan="3"></Border>
                        <TextBlock Margin="5" Grid.Column="0" Text="{Binding Name}" Style="{StaticResource ComboTraderTextBlockStyle}"/>
                        <TextBlock Margin="5" Grid.Column="1" Text="{Binding AreaName}" Style="{StaticResource ComboTraderTextBlockStyle}"/>
                        <TextBlock Margin="5" Grid.Column="2" Text="{Binding Contact}" Style="{StaticResource ComboTraderTextBlockStyle}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsMouseOver" Value="True">
                            <Setter TargetName="Grid" Property="Background" Value="{StaticResource LightMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource LightMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"></Setter>
                        </Trigger>
                        <Trigger Property="ComboBoxItem.IsSelected" Value="True">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource LightBrush}"></Setter>
                            <Setter TargetName="Grid" Property="Background" Value="{StaticResource DarkMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DarkMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboProduct Item Template -->
    <Style x:Key="ComboProductItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="150"/>
                            <ColumnDefinition Width="150"/>
                            <ColumnDefinition Width="100"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Border" Grid.ColumnSpan="3"></Border>
                        <TextBlock Margin="5" Grid.Column="0" Text="{Binding Name}" Style="{StaticResource ComboTraderTextBlockStyle}"/>
                        <TextBlock Margin="5" Grid.Column="1" Text="{Binding AreaName}" Style="{StaticResource ComboTraderTextBlockStyle}"/>
                        <TextBlock Margin="5" Grid.Column="2" Text="{Binding Name}" Style="{StaticResource ComboTraderTextBlockStyle}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsMouseOver" Value="True">
                            <Setter TargetName="Grid" Property="Background" Value="{StaticResource LightMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource LightMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"></Setter>
                        </Trigger>
                        <Trigger Property="ComboBoxItem.IsSelected" Value="True">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource LightBrush}"></Setter>
                            <Setter TargetName="Grid" Property="Background" Value="{StaticResource DarkMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DarkMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboCity Item Template -->
    <Style x:Key="ComboCityItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="150"/>
                            <ColumnDefinition Width="150"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Border" Grid.ColumnSpan="3"></Border>
                        <TextBlock Margin="5" Grid.Column="0" Text="{Binding Name}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" Height="18"/>
                        <TextBlock Margin="5" Grid.Column="1" Text="{Binding ParentName}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" Height="18"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsMouseOver" Value="True">
                            <Setter TargetName="Grid" Property="Background" Value="{StaticResource LightMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource LightMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"></Setter>
                        </Trigger>
                        <Trigger Property="ComboBoxItem.IsSelected" Value="True">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource LightBrush}"></Setter>
                            <Setter TargetName="Grid" Property="Background" Value="{StaticResource DarkMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DarkMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboPayment Item Template -->
    <Style x:Key="ComboPaymentItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="125"/>
                            <ColumnDefinition Width="125"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Border" Grid.ColumnSpan="3"></Border>
                        <TextBlock Margin="5" Grid.Column="0" Text="{Binding TradeNo}" Style="{StaticResource ComboPaymentTextBlockStyle}"/>
                        <TextBlock Margin="5" Grid.Column="1" Text="{Binding UnassignedIDR, StringFormat=N0}" Style="{StaticResource ComboPaymentTextBlockStyle}" HorizontalAlignment="Right"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsMouseOver" Value="True">
                            <Setter TargetName="Grid" Property="Background" Value="{StaticResource LightMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource LightMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"></Setter>
                        </Trigger>
                        <Trigger Property="ComboBoxItem.IsSelected" Value="True">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource LightBrush}"></Setter>
                            <Setter TargetName="Grid" Property="Background" Value="{StaticResource DarkMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DarkMainBrush}"></Setter>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NormalBrush is used as the Background for SimpleButton, SimpleRepeatButton -->
    <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#EEE" Offset="0.0"/>
        <GradientStop Color="#CCC" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#CCC" Offset="0.0"/>
        <GradientStop Color="#444" Offset="1.0"/>
    </LinearGradientBrush>

    <!-- LightBrush is used for content areas such as Menu, Tab Control background -->
    <!--<LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF" Offset="0.0"/>
        <GradientStop Color="#EEE" Offset="1.0"/>
    </LinearGradientBrush>-->

    <!-- MouseOverBrush is used for MouseOver in Button, Radio Button, CheckBox -->
    <LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF" Offset="0.0"/>
        <GradientStop Color="#AAA" Offset="1.0"/>
    </LinearGradientBrush>

    <!-- PressedBrush is used for Pressed in Button, Radio Button, CheckBox -->
    <LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#BBB" Offset="0.0"/>
        <GradientStop Color="#EEE" Offset="0.1"/>
        <GradientStop Color="#EEE" Offset="0.9"/>
        <GradientStop Color="#FFF" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#444" Offset="0.0"/>
        <GradientStop Color="#888" Offset="1.0"/>
    </LinearGradientBrush>

    <!-- SelectedBackgroundBrush is used for the Selected item in ListBoxItem, ComboBoxItem-->
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD"/>

    <!-- Disabled Brushes are used for the Disabled look of each control -->
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>

    <!-- Used for background of ScrollViewer, TreeView, ListBox, Expander, TextBox, Tab Control -->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF"/>

    <!-- DefaultedBorderBrush is used to show KeyBoardFocus -->
    <LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#777" Offset="0.0"/>
        <GradientStop Color="#000" Offset="1.0"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888"/>
    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA"/>
    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD"/>

    <!-- Used for Checkmark, Radio button, TreeViewItem, Expander ToggleButton glyphs -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444"/>

    <!-- Simple ScrollViewer 
    ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar 
    It is used by ListBox, MenuItem, ComboBox, and TreeView -->
    <Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

                        <!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="18"/>
                        </Grid.RowDefinitions>

                        <RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand">
                            <Grid>
                                <Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
                            </Grid>
                        </RepeatButton>

                        <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
                        <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleThumbStyle}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand">
                            <Grid>
                                <Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
                            </Grid>
                        </RepeatButton>
                    </Grid>

                    <!-- This uses a single template for ScrollBar and rotate it to be Horizontal
                    It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!-- Rotate the ScrollBar from Vertical to Horizontal -->
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>

                            <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

                            <!-- Change the commands to do Horizontal commands -->
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Simple ComboBox Toggle Button - This is used in ComboBox to expand and collapse the ComboBox Popup-->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <!--<Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="20"/>
            </Grid.ColumnDefinitions>
            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
            <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5" Fill="{DynamicResource WindowBackgroundBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
            <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>-->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2" x:Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            CornerRadius="0" BorderThickness="2,2,0,2" 
                            Background="{StaticResource LightBrush}" />
            <Border Grid.Column="1" Margin="2,2,0,2" x:Name="ButtonBorder"
                            CornerRadius="0, 0, 0, 0" BorderThickness="0,0,2,0" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            Background="{StaticResource DarkBaseBrush}" />
            <Path Name="Arrow" Grid.Column="1" 
                            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                            HorizontalAlignment="Center" Fill="#444"
                            VerticalAlignment="Center" />
        </Grid>

        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{StaticResource MediumMainBrush}" TargetName="Border"/>
                <Setter Property="BorderBrush" Value="{StaticResource MediumMainBrush}" TargetName="ButtonBorder"/>
            </MultiTrigger>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="BorderBrush" Value="{StaticResource MediumMainBrush}" TargetName="Border"/>
                <Setter Property="BorderBrush" Value="{StaticResource MediumMainBrush}" TargetName="ButtonBorder"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource LightBaseBrush}" TargetName="Border"/>
                <Setter Property="BorderBrush" Value="{StaticResource MediumBaseBrush}" TargetName="Border"/>
                <Setter Property="Foreground" Value="{StaticResource DarkBrush}"/>
                <Setter Property="Fill" Value="{StaticResource MediumBaseBrush}" TargetName="Arrow"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- This is the area which contains the selected item in the ComboBox -->

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <!-- This must be named as PART_ContentHost -->
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
    </ControlTemplate>

    <!-- Simple ComboBox 
    This uses the ComboBoxToggleButton to expand and collapse a Popup control
    SimpleScrollViewer to allow items to be scrolled and SimpleComboBoxItem to define the look of each item 
    The Popup shows a list of items in a StackPanel-->

    <Style x:Key="SimpleComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="IsEditable" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Left" />

        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ComboBoxErrorAdorner}" />

        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <!--<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>-->
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource MainTextBrush}"/>
        <Setter Property="TextElement.FontFamily" Value="Segoe UI"/>
        <Setter Property="TextElement.FontSize" Value="14"/>
        <!--<Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>-->
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="{StaticResource DarkBaseBrush}"/>

        <EventSetter Event="PreviewKeyDown" Handler="Global_PreviewKeyDown"/>
        <EventSetter Event="PreviewKeyUp" Handler="ComboBox_PreviewKeyUp" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
                        <ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" BorderBrush="{TemplateBinding BorderBrush}"/>
                        <ContentPresenter HorizontalAlignment="Left" Margin="3,3,30,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                        <!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
                        <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,30,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>

                        <!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">

                                    <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                                    <!--<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>-->
                                    <VirtualizingStackPanel IsItemsHost="True" VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" KeyboardNavigation.DirectionalNavigation="Contained" />

                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- This forces the DropDown to have a minimum size if it is empty -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
                            <Setter Property="BorderBrush" Value="{StaticResource FocusBrush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple ComboBoxItem - This is used for each item inside of the ComboBox. You can change the selected color of each item below-->
    <Style x:Key="SimpleComboBoxItem" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- Change IsHighlighted SelectedBackgroundBrush to set the selection color for the items -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{StaticResource DarkMainBrush}" TargetName="Border"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SimpleDataGridColumnComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource SimpleComboBoxStyle}">
        <Setter Property="IsDropDownOpen" Value="True"/>
    </Style>


</ResourceDictionary>
